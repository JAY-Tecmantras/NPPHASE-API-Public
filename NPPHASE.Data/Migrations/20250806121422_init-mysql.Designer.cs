// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NPPHASE.Data.Context;

#nullable disable

namespace NPPHASE.Data.Migrations
{
    [DbContext(typeof(NPPHASEApiDbContext))]
    [Migration("20250806121422_init-mysql")]
    partial class initmysql
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NPPHASE.Data.Model.Calendar", b =>
                {
                    b.Property<int>("CalendarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CalendarId"));

                    b.Property<DateTimeOffset?>("CalenderLogTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DeviceUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Time")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("CalendarId");

                    b.HasIndex("DeviceUserId");

                    b.ToTable("Calendar");
                });

            modelBuilder.Entity("NPPHASE.Data.Model.CallLog", b =>
                {
                    b.Property<int>("CallLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CallLogId"));

                    b.Property<string>("CallDuration")
                        .HasColumnType("longtext");

                    b.Property<int>("CallTypes")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DeviceUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Latitude")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("LogDateTime")
                        .HasColumnType("timestamp(6)");

                    b.Property<string>("Longitude")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Number")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Recording")
                        .HasColumnType("longtext");

                    b.HasKey("CallLogId");

                    b.HasIndex("DeviceUserId");

                    b.ToTable("CallLogs");
                });

            modelBuilder.Entity("NPPHASE.Data.Model.CardDetail", b =>
                {
                    b.Property<int>("CardDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CardDetailId"));

                    b.Property<int>("CVV")
                        .HasColumnType("int");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DeviceUserId")
                        .HasColumnType("int");

                    b.Property<string>("ExpiryDate")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("NameOnCard")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("CardDetailId");

                    b.HasIndex("DeviceUserId");

                    b.ToTable("CardDetails");
                });

            modelBuilder.Entity("NPPHASE.Data.Model.Contact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ContactId"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DeviceUserId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("HomeNumber")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MobileNumber")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<DateTimeOffset?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("OfficeNumber")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.HasKey("ContactId");

                    b.HasIndex("DeviceUserId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("NPPHASE.Data.Model.DeviceData", b =>
                {
                    b.Property<int>("DeviceDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("DeviceDataId"));

                    b.Property<decimal?>("BatteryPercentage")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DeviceUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsConnectedWithWifi")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("DeviceDataId");

                    b.HasIndex("DeviceUserId");

                    b.ToTable("DeviceData");
                });

            modelBuilder.Entity("NPPHASE.Data.Model.DeviceUser", b =>
                {
                    b.Property<int>("DeviceUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("DeviceUserId"));

                    b.Property<int>("AlacAllotmentProgress")
                        .HasColumnType("int");

                    b.Property<int>("AlacDecryptionProgress")
                        .HasColumnType("int");

                    b.Property<int>("AlacExtractionProgress")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeviceName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DeviceToken")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<string>("DeviceUniqueId")
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.Property<string>("IMEINumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("OS")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("PhaseMonitor")
                        .HasColumnType("int");

                    b.Property<int>("PrivateKeyExtractionProgress")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("DeviceUserId");

                    b.HasIndex("UserId");

                    b.ToTable("DeviceUsers", t =>
                        {
                            t.HasCheckConstraint("CK_DeviceUser_AlacAllotmentProgress", "AlacAllotmentProgress BETWEEN 0 AND 100");

                            t.HasCheckConstraint("CK_DeviceUser_AlacDecryptionProgress", "AlacDecryptionProgress BETWEEN 0 AND 100");

                            t.HasCheckConstraint("CK_DeviceUser_AlacExtractionProgress", "AlacExtractionProgress BETWEEN 0 AND 100");

                            t.HasCheckConstraint("CK_DeviceUser_PhaseMonitor", "PhaseMonitor BETWEEN 0 AND 5");

                            t.HasCheckConstraint("CK_DeviceUser_PrivateKeyExtractionProgress", "PrivateKeyExtractionProgress BETWEEN 0 AND 100");
                        });
                });

            modelBuilder.Entity("NPPHASE.Data.Model.Download", b =>
                {
                    b.Property<int>("DownloadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("DownloadId"));

                    b.Property<int>("AndroidCount")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IphoneCount")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("DownloadId");

                    b.ToTable("Download");
                });

            modelBuilder.Entity("NPPHASE.Data.Model.Exceptions", b =>
                {
                    b.Property<int>("ExceptionsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ExceptionsId"));

                    b.Property<string>("Message")
                        .HasColumnType("longtext");

                    b.Property<string>("ScreenName")
                        .HasColumnType("longtext");

                    b.Property<string>("StackTrace")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp(6)");

                    b.HasKey("ExceptionsId");

                    b.ToTable("Exceptions");
                });

            modelBuilder.Entity("NPPHASE.Data.Model.Facebook", b =>
                {
                    b.Property<int>("FacebookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("FacebookId"));

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ContactPersonName")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DeviceUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Message")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("MessageLogTime")
                        .HasColumnType("timestamp(6)");

                    b.Property<int?>("MessageType")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("FacebookId");

                    b.HasIndex("DeviceUserId");

                    b.ToTable("Facebook");
                });

            modelBuilder.Entity("NPPHASE.Data.Model.Gallery", b =>
                {
                    b.Property<int>("GalleryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("GalleryId"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DeviceUserId")
                        .HasColumnType("int");

                    b.Property<int>("FileTypes")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset>("LogDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("GalleryId");

                    b.HasIndex("DeviceUserId");

                    b.ToTable("Gallery");
                });

            modelBuilder.Entity("NPPHASE.Data.Model.Gmail", b =>
                {
                    b.Property<int>("GmailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("GmailId"));

                    b.Property<string>("BccEmail")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CcEmail")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DeviceUserId")
                        .HasColumnType("int");

                    b.Property<string>("FromEmail")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("MailLogTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("MailType")
                        .HasColumnType("int");

                    b.Property<string>("MessageBody")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Subject")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ToEmail")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("GmailId");

                    b.HasIndex("DeviceUserId");

                    b.ToTable("Gmail");
                });

            modelBuilder.Entity("NPPHASE.Data.Model.InstalledApp", b =>
                {
                    b.Property<int>("InstalledAppId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("InstalledAppId"));

                    b.Property<string>("AppSize")
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DeviceUserId")
                        .HasColumnType("int");

                    b.Property<string>("InstalledAppName")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LogDateTime")
                        .HasColumnType("timestamp(6)");

                    b.Property<DateTimeOffset?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.HasKey("InstalledAppId");

                    b.HasIndex("DeviceUserId");

                    b.ToTable("InstalledApp");
                });

            modelBuilder.Entity("NPPHASE.Data.Model.InternetHistory", b =>
                {
                    b.Property<int>("InternetHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("InternetHistoryId"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DeviceUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("WebLogTime")
                        .HasColumnType("longtext");

                    b.Property<string>("WebUrl")
                        .HasColumnType("longtext");

                    b.HasKey("InternetHistoryId");

                    b.HasIndex("DeviceUserId");

                    b.ToTable("InternetHistory");
                });

            modelBuilder.Entity("NPPHASE.Data.Model.KeyLogger", b =>
                {
                    b.Property<int>("KeyLoggerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("KeyLoggerId"));

                    b.Property<string>("AppName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DeviceUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("KeyValue")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("LogTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.HasKey("KeyLoggerId");

                    b.HasIndex("DeviceUserId");

                    b.ToTable("KeyLogger");
                });

            modelBuilder.Entity("NPPHASE.Data.Model.KeyValuePair", b =>
                {
                    b.Property<int>("KeyValuePairId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("KeyValuePairId"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("KeyValuePairId");

                    b.ToTable("KeyValuePair");
                });

            modelBuilder.Entity("NPPHASE.Data.Model.Kik", b =>
                {
                    b.Property<int>("KikId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("KikId"));

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ContactPersonName")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DeviceUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Message")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("MessageLogTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("MessageType")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.HasKey("KikId");

                    b.HasIndex("DeviceUserId");

                    b.ToTable("Kik");
                });

            modelBuilder.Entity("NPPHASE.Data.Model.Line", b =>
                {
                    b.Property<int>("LineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("LineId"));

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ContactPersonName")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DeviceUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Message")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("MessageLogTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("MessageType")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.HasKey("LineId");

                    b.HasIndex("DeviceUserId");

                    b.ToTable("Line");
                });

            modelBuilder.Entity("NPPHASE.Data.Model.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("LocationId"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DeviceUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("LogDateTime")
                        .HasColumnType("timestamp(6)");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.HasKey("LocationId");

                    b.HasIndex("DeviceUserId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("NPPHASE.Data.Model.SMSLog", b =>
                {
                    b.Property<int>("SMSLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SMSLogId"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DeviceUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset>("LogDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTimeOffset?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<int>("SmsType")
                        .HasColumnType("int");

                    b.HasKey("SMSLogId");

                    b.HasIndex("DeviceUserId");

                    b.ToTable("SMSLogs");
                });

            modelBuilder.Entity("NPPHASE.Data.Model.ScreenShot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DeviceUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("DeviceUserId");

                    b.ToTable("ScreenShot");
                });

            modelBuilder.Entity("NPPHASE.Data.Model.ScreenTime", b =>
                {
                    b.Property<int>("ScreenTimeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ScreenTimeId"));

                    b.Property<string>("AppName")
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DeviceUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("ScreenTimeDuration")
                        .HasColumnType("longtext");

                    b.HasKey("ScreenTimeId");

                    b.HasIndex("DeviceUserId");

                    b.ToTable("ScreenTime");
                });

            modelBuilder.Entity("NPPHASE.Data.Model.Skype", b =>
                {
                    b.Property<int>("SkypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SkypeId"));

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ContactPersonName")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DeviceUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Message")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("MessageLogTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("MessageType")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("SkypeId");

                    b.HasIndex("DeviceUserId");

                    b.ToTable("Skype");
                });

            modelBuilder.Entity("NPPHASE.Data.Model.SurroundRecordings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DeviceUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("RecordingDuration")
                        .HasColumnType("longtext");

                    b.Property<string>("RecordingName")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("DeviceUserId");

                    b.ToTable("SurroundRecording");
                });

            modelBuilder.Entity("NPPHASE.Data.Model.Tinder", b =>
                {
                    b.Property<int>("TinderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("TinderId"));

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ContactPersonName")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DeviceUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Message")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("MessageLogTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("MessageType")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("TinderId");

                    b.HasIndex("DeviceUserId");

                    b.ToTable("Tinder");
                });

            modelBuilder.Entity("NPPHASE.Data.Model.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("CNIC")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset?>("ModificationDate")
                        .HasColumnType("timestamp(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordNormal")
                        .HasColumnType("longtext");

                    b.Property<string>("PermanentAddress")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PresentAddress")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("NPPHASE.Data.Model.Viber", b =>
                {
                    b.Property<int>("ViberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ViberId"));

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ContactPersonName")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DeviceUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Message")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("MessageLogTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("MessageType")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.HasKey("ViberId");

                    b.HasIndex("DeviceUserId");

                    b.ToTable("Viber");
                });

            modelBuilder.Entity("NPPHASE.Data.Model.Whatsapp", b =>
                {
                    b.Property<int>("WhatsappId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("WhatsappId"));

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ContactPersonName")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DeviceUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Message")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("MessageLogTime")
                        .HasColumnType("timestamp(6)");

                    b.Property<int?>("MessageType")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.HasKey("WhatsappId");

                    b.HasIndex("DeviceUserId");

                    b.ToTable("Whatsapp");
                });

            modelBuilder.Entity("NPPHASE.Data.Model.WiFiNetwork", b =>
                {
                    b.Property<int>("WiFINetworkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("WiFINetworkId"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DeviceUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsProtecteted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Strength")
                        .HasColumnType("longtext");

                    b.Property<string>("WiFINetworkName")
                        .HasColumnType("longtext");

                    b.HasKey("WiFINetworkId");

                    b.HasIndex("DeviceUserId");

                    b.ToTable("WiFiNetwork");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("NPPHASE.Data.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("NPPHASE.Data.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NPPHASE.Data.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("NPPHASE.Data.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NPPHASE.Data.Model.Calendar", b =>
                {
                    b.HasOne("NPPHASE.Data.Model.DeviceUser", "DeviceUser")
                        .WithMany()
                        .HasForeignKey("DeviceUserId");

                    b.Navigation("DeviceUser");
                });

            modelBuilder.Entity("NPPHASE.Data.Model.CallLog", b =>
                {
                    b.HasOne("NPPHASE.Data.Model.DeviceUser", "DeviceUser")
                        .WithMany()
                        .HasForeignKey("DeviceUserId");

                    b.Navigation("DeviceUser");
                });

            modelBuilder.Entity("NPPHASE.Data.Model.CardDetail", b =>
                {
                    b.HasOne("NPPHASE.Data.Model.DeviceUser", "DeviceUser")
                        .WithMany()
                        .HasForeignKey("DeviceUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeviceUser");
                });

            modelBuilder.Entity("NPPHASE.Data.Model.Contact", b =>
                {
                    b.HasOne("NPPHASE.Data.Model.DeviceUser", "DeviceUser")
                        .WithMany()
                        .HasForeignKey("DeviceUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeviceUser");
                });

            modelBuilder.Entity("NPPHASE.Data.Model.DeviceData", b =>
                {
                    b.HasOne("NPPHASE.Data.Model.DeviceUser", "DeviceUser")
                        .WithMany()
                        .HasForeignKey("DeviceUserId");

                    b.Navigation("DeviceUser");
                });

            modelBuilder.Entity("NPPHASE.Data.Model.DeviceUser", b =>
                {
                    b.HasOne("NPPHASE.Data.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NPPHASE.Data.Model.Facebook", b =>
                {
                    b.HasOne("NPPHASE.Data.Model.DeviceUser", "DeviceUser")
                        .WithMany()
                        .HasForeignKey("DeviceUserId");

                    b.Navigation("DeviceUser");
                });

            modelBuilder.Entity("NPPHASE.Data.Model.Gallery", b =>
                {
                    b.HasOne("NPPHASE.Data.Model.DeviceUser", "DeviceUser")
                        .WithMany()
                        .HasForeignKey("DeviceUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeviceUser");
                });

            modelBuilder.Entity("NPPHASE.Data.Model.Gmail", b =>
                {
                    b.HasOne("NPPHASE.Data.Model.DeviceUser", "DeviceUser")
                        .WithMany()
                        .HasForeignKey("DeviceUserId");

                    b.Navigation("DeviceUser");
                });

            modelBuilder.Entity("NPPHASE.Data.Model.InstalledApp", b =>
                {
                    b.HasOne("NPPHASE.Data.Model.DeviceUser", "DeviceUser")
                        .WithMany()
                        .HasForeignKey("DeviceUserId");

                    b.Navigation("DeviceUser");
                });

            modelBuilder.Entity("NPPHASE.Data.Model.InternetHistory", b =>
                {
                    b.HasOne("NPPHASE.Data.Model.DeviceUser", "DeviceUser")
                        .WithMany()
                        .HasForeignKey("DeviceUserId");

                    b.Navigation("DeviceUser");
                });

            modelBuilder.Entity("NPPHASE.Data.Model.KeyLogger", b =>
                {
                    b.HasOne("NPPHASE.Data.Model.DeviceUser", "DeviceUser")
                        .WithMany()
                        .HasForeignKey("DeviceUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeviceUser");
                });

            modelBuilder.Entity("NPPHASE.Data.Model.Kik", b =>
                {
                    b.HasOne("NPPHASE.Data.Model.DeviceUser", "DeviceUser")
                        .WithMany()
                        .HasForeignKey("DeviceUserId");

                    b.Navigation("DeviceUser");
                });

            modelBuilder.Entity("NPPHASE.Data.Model.Line", b =>
                {
                    b.HasOne("NPPHASE.Data.Model.DeviceUser", "DeviceUser")
                        .WithMany()
                        .HasForeignKey("DeviceUserId");

                    b.Navigation("DeviceUser");
                });

            modelBuilder.Entity("NPPHASE.Data.Model.Location", b =>
                {
                    b.HasOne("NPPHASE.Data.Model.DeviceUser", "DeviceUser")
                        .WithMany()
                        .HasForeignKey("DeviceUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeviceUser");
                });

            modelBuilder.Entity("NPPHASE.Data.Model.SMSLog", b =>
                {
                    b.HasOne("NPPHASE.Data.Model.DeviceUser", "DeviceUser")
                        .WithMany()
                        .HasForeignKey("DeviceUserId");

                    b.Navigation("DeviceUser");
                });

            modelBuilder.Entity("NPPHASE.Data.Model.ScreenShot", b =>
                {
                    b.HasOne("NPPHASE.Data.Model.DeviceUser", "DeviceUser")
                        .WithMany()
                        .HasForeignKey("DeviceUserId");

                    b.Navigation("DeviceUser");
                });

            modelBuilder.Entity("NPPHASE.Data.Model.ScreenTime", b =>
                {
                    b.HasOne("NPPHASE.Data.Model.DeviceUser", "DeviceUser")
                        .WithMany()
                        .HasForeignKey("DeviceUserId");

                    b.Navigation("DeviceUser");
                });

            modelBuilder.Entity("NPPHASE.Data.Model.Skype", b =>
                {
                    b.HasOne("NPPHASE.Data.Model.DeviceUser", "DeviceUser")
                        .WithMany()
                        .HasForeignKey("DeviceUserId");

                    b.Navigation("DeviceUser");
                });

            modelBuilder.Entity("NPPHASE.Data.Model.SurroundRecordings", b =>
                {
                    b.HasOne("NPPHASE.Data.Model.DeviceUser", "DeviceUser")
                        .WithMany()
                        .HasForeignKey("DeviceUserId");

                    b.Navigation("DeviceUser");
                });

            modelBuilder.Entity("NPPHASE.Data.Model.Tinder", b =>
                {
                    b.HasOne("NPPHASE.Data.Model.DeviceUser", "DeviceUser")
                        .WithMany()
                        .HasForeignKey("DeviceUserId");

                    b.Navigation("DeviceUser");
                });

            modelBuilder.Entity("NPPHASE.Data.Model.Viber", b =>
                {
                    b.HasOne("NPPHASE.Data.Model.DeviceUser", "DeviceUser")
                        .WithMany()
                        .HasForeignKey("DeviceUserId");

                    b.Navigation("DeviceUser");
                });

            modelBuilder.Entity("NPPHASE.Data.Model.Whatsapp", b =>
                {
                    b.HasOne("NPPHASE.Data.Model.DeviceUser", "DeviceUser")
                        .WithMany()
                        .HasForeignKey("DeviceUserId");

                    b.Navigation("DeviceUser");
                });

            modelBuilder.Entity("NPPHASE.Data.Model.WiFiNetwork", b =>
                {
                    b.HasOne("NPPHASE.Data.Model.DeviceUser", "DeviceUser")
                        .WithMany()
                        .HasForeignKey("DeviceUserId");

                    b.Navigation("DeviceUser");
                });
#pragma warning restore 612, 618
        }
    }
}
